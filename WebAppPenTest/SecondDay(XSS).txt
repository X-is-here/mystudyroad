  Today I studied about XSS (cross-site scripting) but only for an hour due to my laziness. I will try to fix that habit in the future. Due to only study for an hour there is very little about XSS I can talk to so I will add more in tomorrow, 2024-10-25.

Cross-stie scripting (XSS) is an attack foucs mostly on the users. It main goal is to get the user data and control he/she/it actions. If the user is a priviledge user we can get the control over the application.

How XSS work?
    XSS maily use JS to exeucte inside the target browser. We can identify in which entry points XSS occurs based on the HTTP response or DOMs. 

There are three type of XSS:
  Reflected XSS, Stored XSS, DOM-based XSS

Reflected XSS:
  It triggered when the application receieve data in an HTTP request and includes the insecure data. We can use proxy or directly insert the script into the url for this kind of XSS but using proxy will be more effective. Even though the impact of reflected XSS are big, it is still less severe than stored XSS.
	To test reflected XSS vulnerability:
		1.Test every entry points 
		2.Submit random alphanumeric values
		3.Determine the relfection context
		4.Test some payload
		5.Test the attack in the browser

Stored XSS:
	It triggered when the application receives data from an untrusted source and includes that data within its later HTTP responses. The data may be submitted to application via HTTP requests. We can URL-encoded to our scripts to bypass filters. 
	To find and test for stored XSS:
		1. Use Burp web vulnerability scanner (* scanner are usually not allowed in bug bounty programs)
		2.Test entry points:
			( parameters, url file path, request headers, out-of-bands routes)
		3.Test exit points (all possible HTTP responses)
		4.Locate the links between entry and exit points(whether the data subbmitted to entry point is emitted from an exit point)  
	When locating the links between entry and exit points it is recommended to make a system. A system where submitting a specific value into each one and monitoring the application's responses to detect cases where the submitted value appear.

DOM-based XSS:
	It triggered when an application contains some client-side JS that processes data from an untrusted source in an unsafe way, usually by writing the data back to the DOM.
	To test and find DOM-based XSS:
		*Basically the same as Relfected and Stored XSS but to find the impact we need to use developer tools to search the DOM for string. If we find the string we need to identify the context. Based on the context refine our input to see how it is processed. If our data is url-encoded before being processed then an XSS attack is unlikely to work.
